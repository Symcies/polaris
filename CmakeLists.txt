PROJECT(polaris CXX)
cmake_minimum_required(VERSION 2.8)

#Variable to indicate where most external dependencies live
set(DEPS_DIR C:/opt/polarisdeps)

#Variables designating where the output files go
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

#Compiler flags for release mode applied to all projects
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2 /MD /W2 /Oi /bigobj")

#Variable to indicate where boost lives
set(BOOST_ROOT C:/opt/polarisdeps/boost_1_54_0)
find_package(Boost 1.54)

if(Boost_FOUND)
	#Boost include dependencies
    include_directories(${Boost_INCLUDE_DIRS})
else()
	message(FATAL_ERROR "Boost not found!")
endif()

#Allow Access to Project-level Directories
include_directories(Libs)
include_directories(Apps)

#TC_Malloc include and library dependencies
include_directories(${DEPS_DIR}/gperftools-2.1/src)
find_library(libtcmalloc NAMES libtcmalloc_minimal  HINTS ${DEPS_DIR}/gperftools-2.1/Release)

#Google Testing Framework include and library dependencies
include_directories(${DEPS_DIR}/gtest-1.7.0/include)
find_library(gtest NAMES gtest  HINTS ${DEPS_DIR}/gtest-1.7.0/msvc/gtest-md/Release)

#ODB include dependencies
include_directories(${DEPS_DIR}/libodb-2.2.2)
include_directories(${DEPS_DIR}/libodb-2.2.2/libodb-sqlite-2.2.0)
include_directories(${DEPS_DIR}/libodb-2.2.2/libodb-sqlite-2.2.0/etc/sqlite)

#ODB library dependencies
#find_library(odb NAMES odb HINTS ${DEPS_DIR}/libodb-2.2.2/lib64)
#find_library(odb_d NAMES odb-d HINTS ${DEPS_DIR}/libodb-2.2.2/lib64)
#find_library(odb_sqlite NAMES odb-sqlite HINTS ${DEPS_DIR}/libodb-2.2.2/libodb-sqlite-2.2.0/lib64)
#find_library(odb_sqlite_d NAMES odb-sqlite-d HINTS ${DEPS_DIR}/libodb-2.2.2/libodb-sqlite-2.2.0/lib64)
#find_library(sqlite3 sqlite3 HINTS C:/opt/polarisdeps/libodb-2.2.2/libodb-sqlite-2.2.0/etc/sqlite/lib64)
#find_library(sqlite3_d sqlite3-d HINTS C:/opt/polarisdeps/libodb-2.2.2/libodb-sqlite-2.2.0/etc/sqlite/lib64)
#set(iolibs io optimized ${odb} optimized ${sqlite3} optimized ${odb_sqlite} debug ${odb_d} debug ${sqlite3_d} debug ${odb_sqlite_d})
set(odb ${DEPS_DIR}/libodb-2.2.2/lib64/odb.lib)
set(odb_sqlite ${DEPS_DIR}/libodb-2.2.2/libodb-sqlite-2.2.0/lib64/odb-sqlite.lib)
set(sqlite3 ${DEPS_DIR}/libodb-2.2.2/libodb-sqlite-2.2.0/etc/sqlite/lib64/sqlite3.lib)
set(iolibs io ${odb} ${sqlite3} ${odb_sqlite})

#glew include and library dependencies
#include_directories(${DEPS_DIR}/glew-1.7.0/include)
#find_library(glew NAMES glew32  HINTS ${DEPS_DIR}/glew-1.7.0/lib)

#wxWidgets include and library dependencies
#include_directories(${DEPS_DIR}/wxWidgets-2.9.3/include)
#include_directories(${DEPS_DIR}/wxWidgets-2.9.3/include/msvc)
#find_library(wx NAMES wx HINTS ${DEPS_DIR}/wxWidgets-2.9.3/lib/vc_lib)

#plplot include and library dependencies
#include_directories(${DEPS_DIR}/plplot/include/plplot)


#Apply CMake over POLARIS library project structure
add_subdirectory (Libs/Core) 
#add_subdirectory (Libs/Antares) 
add_subdirectory (Libs/Repository) 
add_subdirectory (Libs/Io) 
add_subdirectory (Libs/spatial) 
add_subdirectory (Libs/Routing) 

#Apply CMake over POLARIS application project structure
add_subdirectory (Apps/Core_Tests) 
add_subdirectory (Apps/Io_Demo) 
add_subdirectory (Apps/Test_Application) 
